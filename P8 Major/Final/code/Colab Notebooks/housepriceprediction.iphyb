{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1-E4DpbMlENVMf2xuRyhl_zAeHPDqGfeo","authorship_tag":"ABX9TyMrwUvK5EYfODnLm56Y2j1q"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"xkDu_c-eDuSV","executionInfo":{"status":"ok","timestamp":1662802528325,"user_tz":-345,"elapsed":753,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}}},"outputs":[],"source":["# Importing the Libraries\n","#nabin kumar bamma \n","#these you can run in juypiter or colab\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","from sklearn import preprocessing\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score\n","from sklearn.metrics import mean_squared_error\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.svm import SVR\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.model_selection import GridSearchCV\n","from datetime import datetime"]},{"cell_type":"code","source":["# Importing the dataset\n","df=pd.read_csv('/content/drive/MyDrive/Colab Notebooks/California housing.csv')\n","df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"1kaNP8TeEY6J","executionInfo":{"status":"ok","timestamp":1662802529018,"user_tz":-345,"elapsed":702,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"d7c07a4a-95aa-464c-f62c-27dfeff9d8ff"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n","0    -122.23     37.88                41.0        880.0           129.0   \n","1    -122.22     37.86                21.0       7099.0          1106.0   \n","2    -122.24     37.85                52.0       1467.0           190.0   \n","3    -122.25     37.85                52.0       1274.0           235.0   \n","4    -122.25     37.85                52.0       1627.0           280.0   \n","\n","   population  households  median_income  median_house_value ocean_proximity  \n","0       322.0       126.0         8.3252            452600.0        NEAR BAY  \n","1      2401.0      1138.0         8.3014            358500.0        NEAR BAY  \n","2       496.0       177.0         7.2574            352100.0        NEAR BAY  \n","3       558.0       219.0         5.6431            341300.0        NEAR BAY  \n","4       565.0       259.0         3.8462            342200.0        NEAR BAY  "],"text/html":["\n","  <div id=\"df-e10ec0c1-c004-4694-8c42-ec4601c879dc\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>longitude</th>\n","      <th>latitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>median_house_value</th>\n","      <th>ocean_proximity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-122.23</td>\n","      <td>37.88</td>\n","      <td>41.0</td>\n","      <td>880.0</td>\n","      <td>129.0</td>\n","      <td>322.0</td>\n","      <td>126.0</td>\n","      <td>8.3252</td>\n","      <td>452600.0</td>\n","      <td>NEAR BAY</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-122.22</td>\n","      <td>37.86</td>\n","      <td>21.0</td>\n","      <td>7099.0</td>\n","      <td>1106.0</td>\n","      <td>2401.0</td>\n","      <td>1138.0</td>\n","      <td>8.3014</td>\n","      <td>358500.0</td>\n","      <td>NEAR BAY</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-122.24</td>\n","      <td>37.85</td>\n","      <td>52.0</td>\n","      <td>1467.0</td>\n","      <td>190.0</td>\n","      <td>496.0</td>\n","      <td>177.0</td>\n","      <td>7.2574</td>\n","      <td>352100.0</td>\n","      <td>NEAR BAY</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-122.25</td>\n","      <td>37.85</td>\n","      <td>52.0</td>\n","      <td>1274.0</td>\n","      <td>235.0</td>\n","      <td>558.0</td>\n","      <td>219.0</td>\n","      <td>5.6431</td>\n","      <td>341300.0</td>\n","      <td>NEAR BAY</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-122.25</td>\n","      <td>37.85</td>\n","      <td>52.0</td>\n","      <td>1627.0</td>\n","      <td>280.0</td>\n","      <td>565.0</td>\n","      <td>259.0</td>\n","      <td>3.8462</td>\n","      <td>342200.0</td>\n","      <td>NEAR BAY</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e10ec0c1-c004-4694-8c42-ec4601c879dc')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e10ec0c1-c004-4694-8c42-ec4601c879dc button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e10ec0c1-c004-4694-8c42-ec4601c879dc');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["# Information of the whole dataset\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VXR3vOfQFaYn","executionInfo":{"status":"ok","timestamp":1662802529020,"user_tz":-345,"elapsed":23,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"f407e226-6207-4175-c843-7f2db6eca548"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 20640 entries, 0 to 20639\n","Data columns (total 10 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   longitude           20640 non-null  float64\n"," 1   latitude            20640 non-null  float64\n"," 2   housing_median_age  20640 non-null  float64\n"," 3   total_rooms         20640 non-null  float64\n"," 4   total_bedrooms      20433 non-null  float64\n"," 5   population          20640 non-null  float64\n"," 6   households          20640 non-null  float64\n"," 7   median_income       20640 non-null  float64\n"," 8   median_house_value  20640 non-null  float64\n"," 9   ocean_proximity     20640 non-null  object \n","dtypes: float64(9), object(1)\n","memory usage: 1.6+ MB\n"]}]},{"cell_type":"code","source":["# Data Visualization on the the whole dataset\n","df.hist(bins = 50, figsize = (15,20))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"cQ8yljffFkr5","executionInfo":{"status":"ok","timestamp":1662802530960,"user_tz":-345,"elapsed":1952,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"9c84dda8-9546-47da-ab2a-b0492a9ce07f"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x1440 with 9 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# Missing values find out\n","df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uhxUF3I9F0qm","executionInfo":{"status":"ok","timestamp":1662802530962,"user_tz":-345,"elapsed":34,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"4aa538c7-3fe1-44ed-c51b-a4c890e2839e"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["longitude               0\n","latitude                0\n","housing_median_age      0\n","total_rooms             0\n","total_bedrooms        207\n","population              0\n","households              0\n","median_income           0\n","median_house_value      0\n","ocean_proximity         0\n","dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Total null values on the \"total bedrooms\" column\n","df[df['total_bedrooms'].isnull()]\n","df.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"n7x6KKtXGBTR","executionInfo":{"status":"ok","timestamp":1662802530963,"user_tz":-345,"elapsed":30,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"ce5c0733-f1d4-4d8e-aee0-93f9fe8494c4"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n","20635    -121.09     39.48                25.0       1665.0           374.0   \n","20636    -121.21     39.49                18.0        697.0           150.0   \n","20637    -121.22     39.43                17.0       2254.0           485.0   \n","20638    -121.32     39.43                18.0       1860.0           409.0   \n","20639    -121.24     39.37                16.0       2785.0           616.0   \n","\n","       population  households  median_income  median_house_value  \\\n","20635       845.0       330.0         1.5603             78100.0   \n","20636       356.0       114.0         2.5568             77100.0   \n","20637      1007.0       433.0         1.7000             92300.0   \n","20638       741.0       349.0         1.8672             84700.0   \n","20639      1387.0       530.0         2.3886             89400.0   \n","\n","      ocean_proximity  \n","20635          INLAND  \n","20636          INLAND  \n","20637          INLAND  \n","20638          INLAND  \n","20639          INLAND  "],"text/html":["\n","  <div id=\"df-90a84ca4-528c-4336-a2af-9f9c627edb32\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>longitude</th>\n","      <th>latitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>median_house_value</th>\n","      <th>ocean_proximity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>20635</th>\n","      <td>-121.09</td>\n","      <td>39.48</td>\n","      <td>25.0</td>\n","      <td>1665.0</td>\n","      <td>374.0</td>\n","      <td>845.0</td>\n","      <td>330.0</td>\n","      <td>1.5603</td>\n","      <td>78100.0</td>\n","      <td>INLAND</td>\n","    </tr>\n","    <tr>\n","      <th>20636</th>\n","      <td>-121.21</td>\n","      <td>39.49</td>\n","      <td>18.0</td>\n","      <td>697.0</td>\n","      <td>150.0</td>\n","      <td>356.0</td>\n","      <td>114.0</td>\n","      <td>2.5568</td>\n","      <td>77100.0</td>\n","      <td>INLAND</td>\n","    </tr>\n","    <tr>\n","      <th>20637</th>\n","      <td>-121.22</td>\n","      <td>39.43</td>\n","      <td>17.0</td>\n","      <td>2254.0</td>\n","      <td>485.0</td>\n","      <td>1007.0</td>\n","      <td>433.0</td>\n","      <td>1.7000</td>\n","      <td>92300.0</td>\n","      <td>INLAND</td>\n","    </tr>\n","    <tr>\n","      <th>20638</th>\n","      <td>-121.32</td>\n","      <td>39.43</td>\n","      <td>18.0</td>\n","      <td>1860.0</td>\n","      <td>409.0</td>\n","      <td>741.0</td>\n","      <td>349.0</td>\n","      <td>1.8672</td>\n","      <td>84700.0</td>\n","      <td>INLAND</td>\n","    </tr>\n","    <tr>\n","      <th>20639</th>\n","      <td>-121.24</td>\n","      <td>39.37</td>\n","      <td>16.0</td>\n","      <td>2785.0</td>\n","      <td>616.0</td>\n","      <td>1387.0</td>\n","      <td>530.0</td>\n","      <td>2.3886</td>\n","      <td>89400.0</td>\n","      <td>INLAND</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-90a84ca4-528c-4336-a2af-9f9c627edb32')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-90a84ca4-528c-4336-a2af-9f9c627edb32 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-90a84ca4-528c-4336-a2af-9f9c627edb32');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Describing the whole dataset\n","df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"1dFSt7hcGMHq","executionInfo":{"status":"ok","timestamp":1662802531998,"user_tz":-345,"elapsed":1062,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"d16133f8-2ed4-4884-d817-b5f077e8bdc8"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          longitude      latitude  housing_median_age   total_rooms  \\\n","count  20640.000000  20640.000000        20640.000000  20640.000000   \n","mean    -119.569704     35.631861           28.639486   2635.763081   \n","std        2.003532      2.135952           12.585558   2181.615252   \n","min     -124.350000     32.540000            1.000000      2.000000   \n","25%     -121.800000     33.930000           18.000000   1447.750000   \n","50%     -118.490000     34.260000           29.000000   2127.000000   \n","75%     -118.010000     37.710000           37.000000   3148.000000   \n","max     -114.310000     41.950000           52.000000  39320.000000   \n","\n","       total_bedrooms    population    households  median_income  \\\n","count    20433.000000  20640.000000  20640.000000   20640.000000   \n","mean       537.870553   1425.476744    499.539680       3.870671   \n","std        421.385070   1132.462122    382.329753       1.899822   \n","min          1.000000      3.000000      1.000000       0.499900   \n","25%        296.000000    787.000000    280.000000       2.563400   \n","50%        435.000000   1166.000000    409.000000       3.534800   \n","75%        647.000000   1725.000000    605.000000       4.743250   \n","max       6445.000000  35682.000000   6082.000000      15.000100   \n","\n","       median_house_value  \n","count        20640.000000  \n","mean        206855.816909  \n","std         115395.615874  \n","min          14999.000000  \n","25%         119600.000000  \n","50%         179700.000000  \n","75%         264725.000000  \n","max         500001.000000  "],"text/html":["\n","  <div id=\"df-f8396f8e-1de9-4b78-8439-763510a218cd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>longitude</th>\n","      <th>latitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>median_house_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20433.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","      <td>20640.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>-119.569704</td>\n","      <td>35.631861</td>\n","      <td>28.639486</td>\n","      <td>2635.763081</td>\n","      <td>537.870553</td>\n","      <td>1425.476744</td>\n","      <td>499.539680</td>\n","      <td>3.870671</td>\n","      <td>206855.816909</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.003532</td>\n","      <td>2.135952</td>\n","      <td>12.585558</td>\n","      <td>2181.615252</td>\n","      <td>421.385070</td>\n","      <td>1132.462122</td>\n","      <td>382.329753</td>\n","      <td>1.899822</td>\n","      <td>115395.615874</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>-124.350000</td>\n","      <td>32.540000</td>\n","      <td>1.000000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>1.000000</td>\n","      <td>0.499900</td>\n","      <td>14999.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>-121.800000</td>\n","      <td>33.930000</td>\n","      <td>18.000000</td>\n","      <td>1447.750000</td>\n","      <td>296.000000</td>\n","      <td>787.000000</td>\n","      <td>280.000000</td>\n","      <td>2.563400</td>\n","      <td>119600.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>-118.490000</td>\n","      <td>34.260000</td>\n","      <td>29.000000</td>\n","      <td>2127.000000</td>\n","      <td>435.000000</td>\n","      <td>1166.000000</td>\n","      <td>409.000000</td>\n","      <td>3.534800</td>\n","      <td>179700.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>-118.010000</td>\n","      <td>37.710000</td>\n","      <td>37.000000</td>\n","      <td>3148.000000</td>\n","      <td>647.000000</td>\n","      <td>1725.000000</td>\n","      <td>605.000000</td>\n","      <td>4.743250</td>\n","      <td>264725.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>-114.310000</td>\n","      <td>41.950000</td>\n","      <td>52.000000</td>\n","      <td>39320.000000</td>\n","      <td>6445.000000</td>\n","      <td>35682.000000</td>\n","      <td>6082.000000</td>\n","      <td>15.000100</td>\n","      <td>500001.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8396f8e-1de9-4b78-8439-763510a218cd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f8396f8e-1de9-4b78-8439-763510a218cd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f8396f8e-1de9-4b78-8439-763510a218cd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# Data Preprocessing\n","df['total_rooms'].mean()\n","df['total_bedrooms'].median()\n","df['total_bedrooms'].fillna(df['total_bedrooms'].median(), inplace = True)"],"metadata":{"id":"CxlYMIZsGUIP","executionInfo":{"status":"ok","timestamp":1662802531999,"user_tz":-345,"elapsed":65,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# After caring Showing the null values\n","# After caring Showing the null values\n","df.isnull().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LMpOfNZkGgQE","executionInfo":{"status":"ok","timestamp":1662802532002,"user_tz":-345,"elapsed":66,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"950f8624-650d-43b9-be94-ae1def877cb9"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["longitude             0\n","latitude              0\n","housing_median_age    0\n","total_rooms           0\n","total_bedrooms        0\n","population            0\n","households            0\n","median_income         0\n","median_house_value    0\n","ocean_proximity       0\n","dtype: int64"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# After caring the total null values on the \"total bedrooms\" column\n","df[df['total_bedrooms'].isnull()]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"id":"ucPuhS0NHKGq","executionInfo":{"status":"ok","timestamp":1662802532003,"user_tz":-345,"elapsed":59,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"666ee185-b0e9-4f84-d07b-a503f7e28a7f"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Empty DataFrame\n","Columns: [longitude, latitude, housing_median_age, total_rooms, total_bedrooms, population, households, median_income, median_house_value, ocean_proximity]\n","Index: []"],"text/html":["\n","  <div id=\"df-d0b9ba0a-2a55-48d0-8038-ed3d2ac847a1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>longitude</th>\n","      <th>latitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>median_house_value</th>\n","      <th>ocean_proximity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d0b9ba0a-2a55-48d0-8038-ed3d2ac847a1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-d0b9ba0a-2a55-48d0-8038-ed3d2ac847a1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-d0b9ba0a-2a55-48d0-8038-ed3d2ac847a1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# After caring the whole dataset information\n","df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4hGgaeVCHSSD","executionInfo":{"status":"ok","timestamp":1662802532005,"user_tz":-345,"elapsed":59,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"d456b827-96b5-4c3a-92b2-1c24c90819f3"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 20640 entries, 0 to 20639\n","Data columns (total 10 columns):\n"," #   Column              Non-Null Count  Dtype  \n","---  ------              --------------  -----  \n"," 0   longitude           20640 non-null  float64\n"," 1   latitude            20640 non-null  float64\n"," 2   housing_median_age  20640 non-null  float64\n"," 3   total_rooms         20640 non-null  float64\n"," 4   total_bedrooms      20640 non-null  float64\n"," 5   population          20640 non-null  float64\n"," 6   households          20640 non-null  float64\n"," 7   median_income       20640 non-null  float64\n"," 8   median_house_value  20640 non-null  float64\n"," 9   ocean_proximity     20640 non-null  object \n","dtypes: float64(9), object(1)\n","memory usage: 1.6+ MB\n"]}]},{"cell_type":"code","source":["# Counting the \"ocean proximity\" \n","counts = df['ocean_proximity'].value_counts()\n","counts"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A2Yj9f5GHZN_","executionInfo":{"status":"ok","timestamp":1662802532007,"user_tz":-345,"elapsed":57,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"e7935b81-1247-4ec0-da99-41f0ac0d03e1"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<1H OCEAN     9136\n","INLAND        6551\n","NEAR OCEAN    2658\n","NEAR BAY      2290\n","ISLAND           5\n","Name: ocean_proximity, dtype: int64"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# Dealing with the \"ocean proximity\" column\n","enc = preprocessing.LabelEncoder()\n","df['ocean_proximity'] = enc.fit_transform(df['ocean_proximity'])\n","df['ocean_proximity'].value_counts\n","df.tail()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"HMwh7SS0HfQN","executionInfo":{"status":"ok","timestamp":1662802532011,"user_tz":-345,"elapsed":58,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"2fdc509a-0f17-4e03-d1e4-365d40e09ae7"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n","20635    -121.09     39.48                25.0       1665.0           374.0   \n","20636    -121.21     39.49                18.0        697.0           150.0   \n","20637    -121.22     39.43                17.0       2254.0           485.0   \n","20638    -121.32     39.43                18.0       1860.0           409.0   \n","20639    -121.24     39.37                16.0       2785.0           616.0   \n","\n","       population  households  median_income  median_house_value  \\\n","20635       845.0       330.0         1.5603             78100.0   \n","20636       356.0       114.0         2.5568             77100.0   \n","20637      1007.0       433.0         1.7000             92300.0   \n","20638       741.0       349.0         1.8672             84700.0   \n","20639      1387.0       530.0         2.3886             89400.0   \n","\n","       ocean_proximity  \n","20635                1  \n","20636                1  \n","20637                1  \n","20638                1  \n","20639                1  "],"text/html":["\n","  <div id=\"df-8209afd3-19d5-4f97-ab0e-a8c2aab51015\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>longitude</th>\n","      <th>latitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>median_house_value</th>\n","      <th>ocean_proximity</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>20635</th>\n","      <td>-121.09</td>\n","      <td>39.48</td>\n","      <td>25.0</td>\n","      <td>1665.0</td>\n","      <td>374.0</td>\n","      <td>845.0</td>\n","      <td>330.0</td>\n","      <td>1.5603</td>\n","      <td>78100.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20636</th>\n","      <td>-121.21</td>\n","      <td>39.49</td>\n","      <td>18.0</td>\n","      <td>697.0</td>\n","      <td>150.0</td>\n","      <td>356.0</td>\n","      <td>114.0</td>\n","      <td>2.5568</td>\n","      <td>77100.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20637</th>\n","      <td>-121.22</td>\n","      <td>39.43</td>\n","      <td>17.0</td>\n","      <td>2254.0</td>\n","      <td>485.0</td>\n","      <td>1007.0</td>\n","      <td>433.0</td>\n","      <td>1.7000</td>\n","      <td>92300.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20638</th>\n","      <td>-121.32</td>\n","      <td>39.43</td>\n","      <td>18.0</td>\n","      <td>1860.0</td>\n","      <td>409.0</td>\n","      <td>741.0</td>\n","      <td>349.0</td>\n","      <td>1.8672</td>\n","      <td>84700.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>20639</th>\n","      <td>-121.24</td>\n","      <td>39.37</td>\n","      <td>16.0</td>\n","      <td>2785.0</td>\n","      <td>616.0</td>\n","      <td>1387.0</td>\n","      <td>530.0</td>\n","      <td>2.3886</td>\n","      <td>89400.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8209afd3-19d5-4f97-ab0e-a8c2aab51015')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8209afd3-19d5-4f97-ab0e-a8c2aab51015 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8209afd3-19d5-4f97-ab0e-a8c2aab51015');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# Data selecion in the dataset\n","X = df.drop('median_house_value', axis=1).values\n","y = df['median_house_value'].values"],"metadata":{"id":"zG0-1itwHw9c","executionInfo":{"status":"ok","timestamp":1662802532012,"user_tz":-345,"elapsed":57,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["# Data scaling on the 'X'\n","scaler = preprocessing.StandardScaler()\n","X = scaler.fit_transform(X)\n","X.std()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nhO0QC4DH9XA","executionInfo":{"status":"ok","timestamp":1662802532013,"user_tz":-345,"elapsed":56,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"2190426c-bd3f-43e0-de19-60ac44229d51"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["# Splitting the dataset into the Training set and Test set\n","X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state = 42)"],"metadata":{"id":"fqtIJNzrID3s","executionInfo":{"status":"ok","timestamp":1662802532015,"user_tz":-345,"elapsed":54,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["# Training the Linear Regression model on the Training set\n","regressor = LinearRegression()\n","regressor.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VI5mmhRhIHeq","executionInfo":{"status":"ok","timestamp":1662802532017,"user_tz":-345,"elapsed":55,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"d46afec8-4e1d-4b72-9f8f-2f03a88907e8"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearRegression()"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# accuracy the regression\n","regressor.score(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EcNVaFgZIM9g","executionInfo":{"status":"ok","timestamp":1662802532018,"user_tz":-345,"elapsed":54,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"e86ca5ca-0eeb-4de1-fdc9-66715505089b"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6401079709888613"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["# Test set results\n","y_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AxHz_3eUIRzV","executionInfo":{"status":"ok","timestamp":1662802532020,"user_tz":-345,"elapsed":53,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"c510d5eb-e523-4645-9cde-9f1b040e1383"},"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 47700.,  45800., 500001., ..., 500001.,  72300., 151500.])"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["# Predicting the Test set results\n","y_pred = regressor.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jTRPdyZpIWfB","executionInfo":{"status":"ok","timestamp":1662802532021,"user_tz":-345,"elapsed":51,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"68c4c2c7-1386-4d14-c037-59c93baed54a"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 63642.8756283 , 154445.82484211, 252777.76132135, ...,\n","       439690.1127737 , 130408.05181885, 175513.56755484])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["# Creating K-Nearest Neighbors environment\n","params = {\n","    'n_neighbors': [9],  \n","    'weights': ['distance'],  \n","    'p': [1]   \n","    }\n","params"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OPPB-1XiIYYa","executionInfo":{"status":"ok","timestamp":1662802532022,"user_tz":-345,"elapsed":47,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"f637f1d7-dc5f-436d-fb04-45ab98f48478"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'n_neighbors': [9], 'weights': ['distance'], 'p': [1]}"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["# Importing the K-NN model\n","knn = KNeighborsRegressor()\n","rs = GridSearchCV(estimator=knn, param_grid=params, cv=10, n_jobs=-1, scoring='neg_mean_squared_error')\n","rs.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YjyuwRglImWy","executionInfo":{"status":"ok","timestamp":1662802533168,"user_tz":-345,"elapsed":1190,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"151dfdc1-0a00-477f-9782-41b3b7b6696e"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=10, estimator=KNeighborsRegressor(), n_jobs=-1,\n","             param_grid={'n_neighbors': [9], 'p': [1], 'weights': ['distance']},\n","             scoring='neg_mean_squared_error')"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["rs.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GFlkIwz-Ip2-","executionInfo":{"status":"ok","timestamp":1662802533169,"user_tz":-345,"elapsed":16,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"39899fb5-dc86-4049-9a62-cd1128770c45"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsRegressor(n_neighbors=9, p=1, weights='distance')"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["# Importing the Time explorer module\n","knn = rs.best_estimator_\n","start = datetime.now()\n","start"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2xIf3HZlIyWF","executionInfo":{"status":"ok","timestamp":1662802533171,"user_tz":-345,"elapsed":15,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"c2a59a5b-dfa3-4834-8264-57c85330d64e"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["datetime.datetime(2022, 9, 10, 9, 35, 31, 436332)"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["# Training the K-NN model on the Training set\n","knn.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ip6ZFVJTI2tI","executionInfo":{"status":"ok","timestamp":1662802533173,"user_tz":-345,"elapsed":14,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"73d7f544-623a-4972-fd3d-55396b94638c"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["KNeighborsRegressor(n_neighbors=9, p=1, weights='distance')"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Predicting the K-NN model on the Test set\n","y_pred = knn.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zHuZPy7LI71A","executionInfo":{"status":"ok","timestamp":1662802533748,"user_tz":-345,"elapsed":584,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"9ce1061b-2029-4ef8-c343-1f33726bfaf5"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 51040.93799286,  66678.85967199, 411455.23416212, ...,\n","       455558.93491623,  73201.88495513, 184762.2797947 ])"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# The amount of time spent\n","stop = datetime.now()\n","delta = stop - start\n","delta"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cDJ2l3FzJAo1","executionInfo":{"status":"ok","timestamp":1662802533749,"user_tz":-345,"elapsed":37,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"4c34911c-5588-47b1-b3f3-7cbf737ea738"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["datetime.timedelta(microseconds=608350)"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Accuracy of the K-NN model \n","accuracy = r2_score(y_test, y_pred)\n","accuracy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EbTGRN_vJGeF","executionInfo":{"status":"ok","timestamp":1662802533750,"user_tz":-345,"elapsed":30,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"9206b3fc-6a9c-4abb-c09d-ea97628a4b47"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7420932072260709"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["# Eerror detection on the K-NN model \n","error = np.sqrt(mean_squared_error(y_test, y_pred))\n","error"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YdHieZ7JJMYB","executionInfo":{"status":"ok","timestamp":1662802533752,"user_tz":-345,"elapsed":27,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"c6df5b76-b52c-4698-ad59-086b043fbbe6"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["58134.6176387419"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["# Time compute of the K-NN Model\n","seconds = delta.seconds + delta.microseconds/1E6\n","seconds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WQY7QbN5KLr4","executionInfo":{"status":"ok","timestamp":1662802533753,"user_tz":-345,"elapsed":25,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"be49cc46-f93c-45f7-fc77-d7b715524946"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.60835"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# Creating the support vector regressor environment\n","svr = SVR(C = 100, gamma = 1, kernel = 'linear')\n","svr"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7xTQ9P7IK0Dw","executionInfo":{"status":"ok","timestamp":1662802533754,"user_tz":-345,"elapsed":22,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"3ea3a972-fb1a-41a0-efac-b82471e5fc91"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVR(C=100, gamma=1, kernel='linear')"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# Importing the Time explorer module\n","start = datetime.now()\n","start"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ybtxWARrK9IX","executionInfo":{"status":"ok","timestamp":1662802534374,"user_tz":-345,"elapsed":637,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"6b6e5180-c958-47bd-bc13-e6b5fb3d4caf"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["datetime.datetime(2022, 9, 10, 9, 35, 32, 210506)"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["# Training the SVR model on the Training set\n","svr.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mjrgzsPyLGiD","executionInfo":{"status":"ok","timestamp":1662802551384,"user_tz":-345,"elapsed":17020,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"53805147-1442-4ae8-9dd2-4736f378a322"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVR(C=100, gamma=1, kernel='linear')"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["# Predicting the SVR model on the Test set\n","y_pred = svr.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yBpQyKoTLOLN","executionInfo":{"status":"ok","timestamp":1662802552853,"user_tz":-345,"elapsed":1479,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"0c641a68-9468-4cf7-fc73-6e5ac48c245e"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 68215.30096126, 142312.62977755, 237984.84612508, ...,\n","       419312.09997962, 133584.68994066, 162759.1365595 ])"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["# The amount of time spent\n","stop = datetime.now()\n","delta = stop - start\n","delta"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_C53pvZ3LSwj","executionInfo":{"status":"ok","timestamp":1662802552853,"user_tz":-345,"elapsed":45,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"eff7467f-323f-4197-e8df-59d95b2a950d"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["datetime.timedelta(seconds=18, microseconds=790326)"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["# Accuracy of the SVR model \n","accuracy = r2_score(y_test, y_pred)\n","accuracy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tHXNH-SjLYnA","executionInfo":{"status":"ok","timestamp":1662802552854,"user_tz":-345,"elapsed":33,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"9ed2cb28-8c0d-4296-934c-1ca9c738d71f"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.5858920661609106"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["# Eerror detection on the SVR model \n","error = np.sqrt(mean_squared_error(y_test, y_pred))\n","error"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JVFzhZKeLdh7","executionInfo":{"status":"ok","timestamp":1662802552855,"user_tz":-345,"elapsed":30,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"53f1f92c-e123-464c-acad-386992285565"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["73664.83248223207"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["# Time compute of the SVR Model\n","seconds = delta.seconds + delta.microseconds/1E6\n","seconds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_7bsu7TxLhtZ","executionInfo":{"status":"ok","timestamp":1662802552856,"user_tz":-345,"elapsed":26,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"5a5c42e0-d1a8-4bf1-ec03-9ea858ea80a4"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["18.790326"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["# Splitting the dataset into the Training set and Test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)"],"metadata":{"id":"vzJIQiKVLqZN","executionInfo":{"status":"ok","timestamp":1662802552856,"user_tz":-345,"elapsed":20,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["# Creating Decision Tree Regressor model environment\n","params = {'max_depth': [7], \n","          'max_features': ['auto', 'sqrt'], \n","          'min_samples_leaf': [7],\n","          'min_samples_split': [0.1], \n","          'criterion': ['mse'] \n","         }\n","params"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0kEfpvgALvXK","executionInfo":{"status":"ok","timestamp":1662802552857,"user_tz":-345,"elapsed":20,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"8e83287d-48b7-4bb0-f61e-857a7916819a"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'max_depth': [7],\n"," 'max_features': ['auto', 'sqrt'],\n"," 'min_samples_leaf': [7],\n"," 'min_samples_split': [0.1],\n"," 'criterion': ['mse']}"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["# Importing the Decision Tree Regressor model\n","tree = DecisionTreeRegressor()\n","rs = GridSearchCV(estimator=tree, param_grid=params, cv=5, n_jobs=-1, scoring='neg_mean_squared_error')\n","rs.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o1P8RnCAL1bl","executionInfo":{"status":"ok","timestamp":1662802553876,"user_tz":-345,"elapsed":1036,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"3c5a784c-502f-4185-ce25-5f0bdc00a367"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/tree/_classes.py:363: FutureWarning: Criterion 'mse' was deprecated in v1.0 and will be removed in version 1.2. Use `criterion='squared_error'` which is equivalent.\n","  FutureWarning,\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5, estimator=DecisionTreeRegressor(), n_jobs=-1,\n","             param_grid={'criterion': ['mse'], 'max_depth': [7],\n","                         'max_features': ['auto', 'sqrt'],\n","                         'min_samples_leaf': [7], 'min_samples_split': [0.1]},\n","             scoring='neg_mean_squared_error')"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["# In details Decision tree Regressor model\n","rs.best_estimator_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KE7ZFm1LL8L9","executionInfo":{"status":"ok","timestamp":1662802553877,"user_tz":-345,"elapsed":43,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"25317e32-1951-40cf-9f20-48773513550f"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor(criterion='mse', max_depth=7, max_features='auto',\n","                      min_samples_leaf=7, min_samples_split=0.1)"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["# Importing the Time explorer module\n","start = datetime.now()\n","start"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sQmup0dVMmWF","executionInfo":{"status":"ok","timestamp":1662802553878,"user_tz":-345,"elapsed":38,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"1f88d249-9428-409e-81f7-cdd170addd02"},"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/plain":["datetime.datetime(2022, 9, 10, 9, 35, 51, 491244)"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# Training the Decision Tree Regression model on the Training set\n","tree.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0QL8DQ_mMuxl","executionInfo":{"status":"ok","timestamp":1662802553879,"user_tz":-345,"elapsed":35,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"e40e0822-2a75-4a5a-96e3-5f091e67d375"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeRegressor()"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["# Predicting the Decision Tree Regression model on the Test set\n","y_pred = tree.predict(X_test)\n","y_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-bjP6OE-M1tB","executionInfo":{"status":"ok","timestamp":1662802553880,"user_tz":-345,"elapsed":33,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"a4bb9ebb-d589-4dcb-f9ba-19cfbda660c9"},"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 40900.,  52900., 500001., ..., 500001.,  69600., 160300.])"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["# The amount of time spent\n","stop = datetime.now()\n","delta = stop - start\n","delta"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qmwaL6ZhM4B5","executionInfo":{"status":"ok","timestamp":1662802553881,"user_tz":-345,"elapsed":31,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"d88c84c6-afe2-4858-fcdc-3a106110f243"},"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["datetime.timedelta(microseconds=204230)"]},"metadata":{},"execution_count":46}]},{"cell_type":"code","source":["# Accuracy of the Decision tree regression model \n","accuracy = r2_score(y_test, y_pred)\n","accuracy"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1T5cJTCZM-rk","executionInfo":{"status":"ok","timestamp":1662802553883,"user_tz":-345,"elapsed":30,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"66061587-ac39-4ff2-d2f2-7bd75e5163e6"},"execution_count":47,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6487670805996"]},"metadata":{},"execution_count":47}]},{"cell_type":"code","source":["# Eerror detection on the Decision tree regression model \n","error = np.sqrt(mean_squared_error(y_test, y_pred))\n","error"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yfqn9pQoNDLg","executionInfo":{"status":"ok","timestamp":1662802553884,"user_tz":-345,"elapsed":28,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"79f2724a-1c8c-4570-b917-61fe09ea329b"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["67842.37400298183"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["# Time compute of the Decision tree regression Model\n","seconds = delta.seconds + delta.microseconds/1E6\n","seconds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jzLZV3gbNKDL","executionInfo":{"status":"ok","timestamp":1662802553884,"user_tz":-345,"elapsed":23,"user":{"displayName":"Nabin Bamma ठकुरी","userId":"14217660328192261595"}},"outputId":"54e00322-196e-4989-a44a-73599d4b7db3"},"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.20423"]},"metadata":{},"execution_count":49}]}]}